
.orig x3000

halt

fibonacci
		ADD R6, R6, -4 ;; MAKE SPACE OR RV, RA, OFP, LV

		STR R7, R6, 2 ;; SAVE OLD RETURN ADDRESS
		STR R5, R6, 1 ;; SAVE OLD FRAME POINTER

		ADD R5, R6, 0 ;; SET CURRENT FRAME POINTER
		ADD R6, R6, -5 ;; PLACE STACK POINTER TO MAKE ROOM FOR ALL REGISTERS

		STR R0, R5, -1 ;; SAVE R0
		STR R1, R5, -2 ;; SAVE R1
		STR R2, R5, -3 ;; SAVE R2
		STR R3, R5, -4 ;; SAVE R3
		STR R4, R5, -5 ;; SAVE R4

		LDR R0, R5, 4 ;; VALUE OF N LOADED INTO R0

		ADD R2, R0, -1 
		BRnz BASE

		ADD R6, R6, -1 ;; MOVE R6 UP 1
		ADD R1, R0, -1 ;; R1 NOW HAS N - 1
		STR R1, R6, 0 ;; PUSH ARGUMENT ON STACK
		JSR fibonacci ;; fibonacci(n-1)

		LDR R1, R6, 0 ;; GET RETURN VALUE

		ADD R6, R6, 2 ;; MOVE R6 BACK TO CURRENT FRAME


		ADD R6, R6, -1 ;; MOVE R6 UP 1
		ADD R2, R0, -2 ;; R2 NOW HAS N - 2
		STR R2, R6, 0 ;; PUSH ARGUMENT ON STACK
		JSR fibonacci ;; fibonacci(n-2)

		LDR R2, R6, 0 ;; GET RETURN VALUE

		ADD R6, R6, 2 ;; MOVE R6 BACK TO CURRENT FRAME

		ADD R3, R1, R2 ;; FIB(N-1) + FIB(N-2) 

		STR R3, R5, 3 ;; SET RETURN VALUE
		BR STACK_BREAKDOWN

BASE
		STR R0, R5, 3 ;; SET RETURN VALUE
		BR STACK_BREAKDOWN

STACK_BREAKDOWN
		LDR R4, R5, -5 ;; RESTORE R4
		LDR R3, R5, -4 ;; RESTORE R3
		LDR R2, R5, -3 ;; RESTORE R2
		LDR R1, R5, -2 ;; RESTORE R1
		LDR R0, R5, -1 ;; RESTORE R0
		
		ADD R6, R5, 0 ;; BRING R6 DOWN TO R5, POP OFF ALL LOCAL VARIABLES OFF THE STACK

		LDR R5, R6, 1 ;; RESTORE OLD FRAME POINTER
		LDR R7, R6 2 ;; RESTORE OLD RETURN ADDRESS

		ADD R6, R6, 3 ;; R6 NOW POINTS TO RETURN VALUE
		RET
		
		
		

STACK .fill xF000
.end
